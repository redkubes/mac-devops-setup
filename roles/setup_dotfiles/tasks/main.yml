---
- name: Ensure dotfiles repository is cloned locally.
  git:
    repo: "{{ dotfiles_repo }}"
    dest: "{{ dotfiles_repo_local_destination }}"
    accept_hostkey: "{{ dotfiles_repo_accept_hostkey }}"
  become: no
  tags: dotfiles

- name: Ensure all configured dotfiles are links.
  shell: "ls -F {{ dotfiles_home }}/{{ item }}"
  register: existing_dotfile_info
  failed_when: false
  check_mode: no
  changed_when: false
  with_items: "{{ dotfiles_files }}"
  tags: dotfiles

- name: Remove existing dotfiles file if a replacement is being linked.
  file:
    path: "{{ dotfiles_home }}/{{ dotfiles_files[item.0] }}"
    state: absent
  when: "'@' not in item.1.stdout"
  with_indexed_items: "{{ existing_dotfile_info.results }}"
  tags: dotfiles

- name: Link dotfiles into home folder.
  file:
    src: "{{ dotfiles_repo_local_destination }}/{{ item }}"
    dest: "{{ dotfiles_home }}/{{ item }}"
    state: link
  become: no
  with_items: "{{ dotfiles_files }}"
  tags: dotfiles

- name: Request git configurations and set them
  block:
    - name: Prompt for git configurations
      pause:
        prompt: "Please enter your {{ item.prompt }}"
      register: user_input
      loop:
        - { var: 'user.signingkey', prompt: 'git signing key' }
        - { var: 'user.name', prompt: 'git user name' }
        - { var: 'user.email', prompt: 'git user email' }
        - { var: 'github.user', prompt: 'GitHub username' }
      loop_control:
        index_var: loop_index

    - name: Set git global configurations
      git_config:
        scope: global
        name: "{{ item.item.var }}"
        value: "{{ item.user_input }}"
      loop: "{{ user_input.results }}"
  tags: dotfiles
